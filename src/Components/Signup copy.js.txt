import React, { Component } from "react";
import { Link } from "react-router-dom";
import Avatar from "@material-ui/core/Avatar";
import Button from "@material-ui/core/Button";
import CssBaseline from "@material-ui/core/CssBaseline";
import TextField from "@material-ui/core/TextField";
import Grid from "@material-ui/core/Grid";
import { withStyles } from "@material-ui/core/styles";
import Container from "@material-ui/core/Container";
import { connect } from "react-redux";
import registerAction from "../actions/registerAction";

import Input from "../Components/UI/Input"
import Button from "../Components/UI/Button"

const useStyles = (theme) => ({
  paper: {
    marginTop: theme.spacing(8),
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
  },
  avatar: {
    margin: theme.spacing(1),
    backgroundColor: theme.palette.secondary.main,
  },
  form: {
    width: "100%",
    marginTop: theme.spacing(3),
  },
  submit: {
    margin: theme.spacing(3, 0, 2),
  },
  large: {
    width: theme.spacing(15),
    height: theme.spacing(15),
  },
});

const initialState = {
  email: "",
  password: "",
  image: null,
  imageURL: "url('/public/assets/avatar.jpg')",
};

class SignUp extends Component {

  state = {
      cotrols: {
          email: {
              elementType: 'input',
              elementConfig : {
                  type: 'email',
                  placeholder: 'EMail Address'
              },
              value: '',
              validation : {
                  required: true,
                  isEmail: true
              }
          }
      }
  }
  state = initialState;

  /* Basic validation on form */
  validateForm = () => {
    let emailError = "";
    let passwordError = "";

    if (!this.state.email) {
      emailError = "Email cannot be empty";
    }
    if (!this.state.email.includes("@")) {
      emailError = "Please enter valid email address";
    }
    if (!this.state.password) {
      passwordError = "Password cannot be empty";
    }
    if (this.state.password.length < 6) {
      passwordError = "Password not strong";
    }

    if (emailError || passwordError) {
      this.setState({ emailError, passwordError });
      return false;
    }

    return true;
  };

  /* Enable typing in text boxes */
  handleChange = (event) => {
    this.setState({
      [event.target.name]: event.target.value,
    });
  };

  /* Handle Sign Up form submit */
  handleSubmit = (event) => {
    event.preventDefault();
    const isValid = this.validateForm();
    if (isValid) {
      this.setState({
        emailError: "",
        passwordError: "",
      });
      this.handleSignUp(this);
    }
  };

  /* Render sign up form */
  render() {
    const { classes } = this.props;
    return (
        <Container component='main' maxWidth='xs'>
        <CssBaseline />
        <div className={classes.paper}>
          <Avatar
            alt='Avatar'
            src={this.state.imageURL}
            className={classes.large}
            onClick={this.handleAvatar}
            style={{ cursor: "pointer" }}
          />
          <div style={{ fontSize: 12, color: "red" }}>
            {this.state.imageError}
          </div>
          <form
            className={classes.form}
            onSubmit={this.handleSubmit}
            noValidate
          >
            <Grid container spacing={2}>  
            <Grid item xs={12}>
              <TextField
                variant='outlined'
                required
                fullWidth
                id='email'
                label='Email'
                value={this.state.email}
                name='email'
                autoComplete='email'
                onChange={this.handleChange}
              />
              <div style={{ fontSize: 12, color: "red" }}>
                {this.state.emailError}
              </div>
            </Grid>
            <Grid item xs={12}>
              <TextField
                variant='outlined'
                required
                fullWidth
                name='password'
                label='Password'
                value={this.state.password}
                type='password'
                id='password'
                autoComplete='current-password'
                onChange={this.handleChange}
              />
              <div style={{ fontSize: 12, color: "red" }}>
                {this.state.passwordError}
                </div>
            </Grid>
            
            <Button
              id='sign-up-button'
              fullWidth
              variant='contained'
              color='primary'
              className={classes.submit}
              onClick={() =>
                this.props.registerAction(
                  this.state.firstName,
                  this.state.email,
                  this.state.password
                )
              }
            >Sign In</Button>
            <h3>{this.state.infoMessage} </h3>
            <Grid container justify='flex-end'>
              <Grid item>
                <Link href='/Login' variant='body2'>
                  Already have an account? Sign in
                </Link>
              </Grid>
            </Grid>
            </Grid>
          </form>
        </div>
      </Container>
    )
  }
}

const mapStateToProps = (state) => ({
  ...state,
});
const mapDispatchToProps = (dispatch) => ({
  registerAction: (name, email, password) =>
    dispatch(registerAction(name, email, password)),
});
export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(useStyles, { withTheme: true })(SignUp));
